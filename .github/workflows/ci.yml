name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'ci-test'
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build Go binaries
      run: |
        #!/bin/bash
          mkdir artifacts

          export GOOS=windows
          export GOARCH=amd64
          export FILENAME=artifacts/go2rtc_win64.zip
          go build -ldflags "-s -w" -trimpath && 7z a -mx9 -sdel "$FILENAME" go2rtc.exe

          export GOOS=windows
          export GOARCH=386
          export FILENAME=artifacts/go2rtc_win32.zip
          go build -ldflags "-s -w" -trimpath && 7z a -mx9 -sdel "$FILENAME" go2rtc.exe

          export GOOS=windows
          export GOARCH=arm64
          export FILENAME=artifacts/go2rtc_win_arm64.zip
          go build -ldflags "-s -w" -trimpath && 7z a -mx9 -sdel "$FILENAME" go2rtc.exe

          export GOOS=linux 
          export GOARCH=amd64
          export FILENAME=artifacts/go2rtc_linux_amd64
          go build -ldflags "-s -w" -trimpath -o "$FILENAME" && upx "$FILENAME"

          export GOOS=linux
          export GOARCH=386
          export FILENAME=artifacts/go2rtc_linux_i386
          go build -ldflags "-s -w" -trimpath -o "$FILENAME" && upx "$FILENAME"

          export GOOS=linux
          export GOARCH=arm64
          export FILENAME=artifacts/go2rtc_linux_arm64
          go build -ldflags "-s -w" -trimpath -o "$FILENAME" && upx "$FILENAME"

          export GOOS=linux
          export GOARCH=arm
          export GOARM=7
          export FILENAME=artifacts/go2rtc_linux_arm
          go build -ldflags "-s -w" -trimpath -o "$FILENAME" && upx "$FILENAME"

          export GOOS=linux
          export GOARCH=mipsle
          export FILENAME=artifacts/go2rtc_linux_mipsel
          go build -ldflags "-s -w" -trimpath -o "$FILENAME" && upx "$FILENAME"

          export GOOS=darwin
          export GOARCH=amd64
          export FILENAME=artifacts/go2rtc_mac_amd64.zip
          go build -ldflags "-s -w" -trimpath && 7z a -mx9 -sdel "$FILENAME" go2rtc

          export GOOS=darwin
          export GOARCH=arm64
          export FILENAME=artifacts/go2rtc_mac_arm64.zip
          go build -ldflags "-s -w" -trimpath && 7z a -mx9 -sdel "$FILENAME" go2rtc
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Generate Changelog
      id: changelog
      run: |
        echo "CHANGELOG=CHANGELOG:\n\n$(git log $(git describe --tags --abbrev=0)..HEAD --oneline | awk '{print "- "$0}')" >> $GITHUB_OUTPUT
    - name: Create GitHub release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        files: artifacts/*
        generate_release_notes: true
        name: Release ${{ env.RELEASE_VERSION }}
        body: |
          ## Changelog
          
          ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.ref_name }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=false
            type=match,pattern=v(.*),group=1

      - name: Docker meta Hardware
        id: meta-hw
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.ref_name }}
          flavor: |
            suffix=-hardware
            latest=false
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=false
            type=match,pattern=v(.*),group=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: |
            linux/amd64
            linux/386
            linux/arm/v7
            linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Hardware
        uses: docker/build-push-action@v3
        with:
          context: .
          file: hardware.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-hw.outputs.tags }}
          labels: ${{ steps.meta-hw.outputs.labels }}
